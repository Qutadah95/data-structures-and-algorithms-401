import java.util.LinkedList;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    public static void main(String[] args) {

        System.out.println("Stack ");
        System.out.println("=========================");
        Stack<String> stack = new Stack<>();
        stack.push("one");
        stack.push("two");
        stack.push("three");
        System.out.println("The stack before Any pop : " + stack);

        System.out.println("Peek : " + stack.peek());

        System.out.println("Is the Stack Empty : " + stack.isEmpty());

        System.out.println("Popped node : " + stack.pop());

        System.out.println("The stack after the pop : " + stack);

        System.out.println("====================================");
        System.out.println("Queue ");
        System.out.println("====================================");
        Queue<Integer> queue = new Queue<>();
        queue.enqueue(1);
        queue.enqueue(2);
        queue.enqueue(3);
        queue.enqueue(4);

        System.out.println("The queue before Any pop : " + queue);

        System.out.println("Peek : " + queue.peek());

        System.out.println("Is the Stack Empty : " + queue.isEmpty());

        System.out.println("Dequeued node : " + queue.dequeue());

        System.out.println("The queue after pop : " + queue);

        System.out.println("====================================");
        System.out.println("Pseudo Queue");
        System.out.println("====================================");
        pseudoQueue pseudoQueue = new pseudoQueue();
        pseudoQueue.enqueue(10);
        pseudoQueue.enqueue(15);
        pseudoQueue.enqueue(20);
        pseudoQueue.enqueue(5);
        pseudoQueue.dequeue();
        System.out.println(pseudoQueue);
        System.out.println(pseudoQueue.dequeue());
        System.out.println("====================================");
        System.out.println("Animal Shelter");
        System.out.println("====================================");
        AnimalShelter animalShelter = new AnimalShelter();
        cats Jerry = new cats("Jerry ", "mouse");
        cats Tom = new cats("Tom", "cat");
        dogs sparky = new dogs("sparky", "dog");
        animalShelter.enqueue(Jerry);
        animalShelter.enqueue(Tom);
        animalShelter.enqueue(sparky);
        System.out.println("The dequeued dog is : " + animalShelter.dequeue("dog"));
        System.out.println("The dequeued cat is : " + animalShelter.dequeue("cat"));
        System.out.println("The dequeued mouse is : " + animalShelter.dequeue("mouse"));

        System.out.println("====================================");
        System.out.println("Bracket Validator");
        System.out.println("====================================");
        brackets bracketsValidator = new brackets();
        System.out.println("========test 1 =======");
        String test1 = "[{90}(99)]";
        System.out.println("bracket validator test :  " + test1 + " = ");
        System.out.println(bracketsValidator.validateBrackets(test1));
        System.out.println("========test 2 =======");
        String test2 = "\n[{90}(99){]";
        System.out.println("bracket validator test :  " + test2 + " = ");
        System.out.println(bracketsValidator.validateBrackets(test2));

        System.out.println("============================");

    }

}