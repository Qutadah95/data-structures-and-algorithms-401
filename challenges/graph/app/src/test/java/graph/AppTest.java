/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package graph;

import org.junit.jupiter.api.Test;
import org.w3c.dom.Node;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {
    @Test void appHasAGreeting() {
        App classUnderTest = new App();
        assertNotNull(classUnderTest.getGreeting(), "app should have a greeting");




//        Node can be successfully added to the graph
        Graph<String> test = new Graph<>();
        Vertex<String> vertex = test.addNode("A");

        assertTrue(test.map.containsKey(vertex));



//        An edge can be successfully added to the graph
        Vertex<String> vertexTwo = test.addNode("B");
        test.addEdge(vertex,vertexTwo);

        assertEquals(vertexTwo , test.getNeighbors(vertex).get(0));




//        A collection of all nodes can be properly retrieved from the graph
        ArrayList<Vertex<String>> finalResult = new ArrayList<>();
        finalResult.add(vertex);
        finalResult.add(vertexTwo);
        assertEquals(finalResult, test.getNodes());




//        All appropriate neighbors can be retrieved from the graph
        List<Vertex<String>> resultTwo = new ArrayList<>();
        resultTwo.add(vertexTwo);
        assertEquals(resultTwo , test.getNeighbors(vertex));




//        The proper size is returned, representing the number of nodes in the graph
        assertEquals(2,test.getSize());



//        A graph with only one node and edge can be properly returned
        Graph<String> oneNodeGraph = new Graph<>();
        Vertex<String> vertexThree = oneNodeGraph.addNode("A");

        ArrayList<Vertex<String>> resultThree = new ArrayList<>();
        resultThree.add(vertexThree);
        assertEquals(resultThree, oneNodeGraph.getNodes());



//        An empty graph properly returns null
        Graph<String> emptyGraph = new Graph<>();
        assertNull(emptyGraph.getNodes());


        // lab 36

        Graph<String> graph = new Graph();

        Vertex vertex1= graph.addNode("Pandora");
        Vertex vertex2= graph.addNode("Arendelle");
        Vertex vertex3= graph.addNode("Metroville");
        Vertex vertex4= graph.addNode("Monstroplolis");
        Vertex vertex5= graph.addNode("Narnia");
        Vertex vertex6= graph.addNode("Naboo");



        graph.addEdge(vertex1,vertex2);
        graph.addEdge(vertex2,vertex3);
        graph.addEdge(vertex3,vertex4);
        graph.addEdge(vertex4,vertex5);
        graph.addEdge(vertex5,vertex6);


        List<Vertex> breadthFirst =graph.breadthFirst(vertex1);

        assertEquals("Pandora",breadthFirst.get(0).value);
        assertEquals("Arendelle",breadthFirst.get(1).value);
        assertEquals("Metroville",breadthFirst.get(2).value);
        assertEquals("Monstroplolis",breadthFirst.get(3).value);
        assertEquals("Narnia",breadthFirst.get(4).value);
        assertEquals("Naboo",breadthFirst.get(5).value);
    }
    @Test void businessTrip() {
        Graph businessTrip = new Graph();
        Vertex a = businessTrip.addNode("Pandora");
        Vertex b = businessTrip.addNode("Arendelle");
        Vertex c = businessTrip.addNode("Metroville");
        Vertex d = businessTrip.addNode("Monstropolis");
        Vertex e = businessTrip.addNode("Narnia");
        Vertex f = businessTrip.addNode("Naboo");

        businessTrip.addEdge(a, b, 150);
        businessTrip.addEdge(b, c, 99);
        businessTrip.addEdge(a, c, 82);
        businessTrip.addEdge(b, d, 42);
        businessTrip.addEdge(c, d, 105);
        businessTrip.addEdge(c, e, 37);
        businessTrip.addEdge(c, f, 26);
        businessTrip.addEdge(d, f, 73);
        businessTrip.addEdge(e, f, 250);

        System.out.println("\n\n");
        String[] trip1 = {"Metroville", "Pandora"};
        String[] trip2 = {"Arendelle", "Monstropolis", "Naboo"};
        String[] trip3 = {"Naboo", "Pandora"};
        String[] trip4 = {"Narnia", "Arendelle", "Naboo"};

        assertEquals("True,$82" , businessTrip.businessTrip(trip1));
        assertEquals("True,$115" , businessTrip.businessTrip(trip2));
        assertEquals("False,$0" , businessTrip.businessTrip(trip3));
        assertEquals("False,$0" , businessTrip.businessTrip(trip4));

    }
    @Test void depthFirst() {

        Graph<String> graph = new Graph<>();

        Vertex a = graph.addNode("A");
        Vertex b =  graph.addNode("B");
        Vertex c = graph.addNode("C");
        Vertex d = graph.addNode("D");
        Vertex e = graph.addNode("E");
        Vertex f = graph.addNode("F");
        Vertex g = graph.addNode("G");
        Vertex h = graph.addNode("H");


        graph.addEdge(a,b);
        graph.addEdge(a,d);
        graph.addEdge(b,c);
        graph.addEdge(b,d);
        graph.addEdge(c,g);
        graph.addEdge(d,e);
        graph.addEdge(d,h);
        graph.addEdge(d,f);
        graph.addEdge(h,f);


        List<Vertex<String>> result = new ArrayList<>();
        result.add(a);
        result.add(b);
        result.add(c);
        result.add(g);
        result.add(d);
        result.add(e);
        result.add(h);
        result.add(f);

        assertEquals(result , graph.depthFirst(a));
    }
}
